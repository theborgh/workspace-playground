{"version":3,"sources":["ReactLogo.svg","YarnCat.svg","../../../components/src/CompOne/CompOne.js","../../../components/src/CompTwo/CompTwo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CompOne","className","role","aria-label","CompTwo","App","src","ReactLogo","alt","YarnCat","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iIAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,kQCc5BC,G,YAXC,kBACd,yBAAKC,UAAU,QACb,4BACE,0BAAMC,KAAK,MAAMC,aAAW,cAA5B,gBADF,sBCSWC,G,MAXC,kBACd,yBAAKH,UAAU,QACb,4BACE,0BAAMC,KAAK,MAAMC,aAAW,aAA5B,gBAEQ,IAHV,eCqCWE,E,iLAjCX,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACE,yBAAKK,IAAKC,IAAWN,UAAU,aAAaO,IAAI,eAChD,yBAAKF,IAAKG,IAASR,UAAU,WAAWO,IAAI,yBAE9C,4BACE,uBACEP,UAAU,WACVS,KAAK,gEACLC,OAAO,SACPC,IAAI,uBAEJ,yCANF,iBASF,0DACA,uBAAGX,UAAU,QACX,0BAAMA,UAAU,QAAhB,4CACA,0BAAMA,UAAU,QAAhB,8CACA,0BAAMA,UAAU,QAAhB,+CAEF,yBAAKA,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,EAAD,a,GA3BMY,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f6c2e231.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ReactLogo.2c813d88.svg\";","module.exports = __webpack_public_path__ + \"static/media/YarnCat.42730579.svg\";","import React from 'react';\nimport './CompOne.css';\n\nconst CompOne = () => (\n  <div className=\"Comp\">\n    <h3>\n      <span role=\"img\" aria-label=\"React Logo\">\n        ‚öõÔ∏è\n      </span>\n      ‚Ää Comp One\n    </h3>\n  </div>\n);\n\nexport default CompOne;\n","import React from 'react';\nimport './CompTwo.css';\n\nconst CompTwo = () => (\n  <div className=\"Comp\">\n    <h3>\n      <span role=\"img\" aria-label=\"Yarn Logo\">\n        üê±\n      </span>{' '}\n      Comp Two\n    </h3>\n  </div>\n);\n\nexport default CompTwo;\n","import React, { Component } from 'react';\nimport ReactLogo from './ReactLogo.svg';\nimport YarnCat from './YarnCat.svg';\nimport './App.css';\n\nimport { CompOne, CompTwo } from '@project/components';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div>\n            <img src={ReactLogo} className=\"React-logo\" alt=\"React Logo\" />\n            <img src={YarnCat} className=\"Yarn-cat\" alt=\"Yarn Workspaces Cat\" />\n          </div>\n          <h1>\n            <a\n              className=\"App-link\"\n              href=\"https://github.com/react-workspaces/cra-workspaces-playground\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <strong>React</strong> Workspacess\n            </a>\n          </h1>\n          <h2>Hot Reload Your Workspaces</h2>\n          <p className=\"body\">\n            <code className=\"file\">packages/apps/app-multi-comps/src/App.js</code>\n            <code className=\"file\">packages/components/src/CompOne/CompOne.js</code>\n            <code className=\"file\">packages/components/src/CompTwo/CompTwo.js</code>\n          </p>\n          <div className=\"components\">\n            <CompOne />\n            <CompTwo />\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType !== null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}